{"1725977496859":{"actionType":"saveAll","createdAt":"1725977496859","actionID":"1725977496859","userID":"#TEMP","path":"system.capsules.da528125-df75-40a8-ad4c-ab6e8e28d137.capsUseCodeInfo.capsUseInputs.sss_freeValue-0.capsIptTxtValue","oldValue":"// ---------- import Packs\nimport { ViewStyle } from 'react-native';\nimport { useEffect, useState } from 'react';\nimport { Picker } from 'react-native-picker/picker';\n\n// ---------- import Local Tools\nimport { pathSel, setData } from '../../base/project';\nimport { useData } from '../../..';\n\ntype Tprops = {\n  pass: {\n    pathList: any[];\n    pathEdit: any[];\n    arrFuncs: any[];\n    pathReturn: any[];\n    args: any;\n  };\n};\n\nexport const IptPicker = (props: Tprops) => {\n  let { pathList, pathEdit, arrFuncs, pathReturn, args } = props.pass;\n\n  pathEdit = ['sc.A3.forms.editData.locationId'];\n  const [sttSelected, setSelected] = useState('');\n  const dataList = useData(ct => pathSel(ct, pathList.join()));\n  const newEditData = useData(ct => pathSel(ct, pathEdit.join()));\n\n  // ---------- set Render Item\n  const renderItem = () => {\n    const checkData = dataList && dataList.length > 0;\n\n    if (checkData) {\n      const containFirstOpt = dataList.find(\n        (e: any) => e.label === 'Selecione...',\n      );\n      !containFirstOpt && dataList.unshift({ label: 'Selecione...', id: '0' });\n\n      return dataList.map((item: any, idx: number) => (\n        <Picker.Item key={idx} label={item.label} value={item.id} />\n      ));\n    }\n\n    return (\n      <>\n        <Picker.Item label={'Nenhum item encontrado'} value={'0'} />\n      </>\n    );\n  };\n\n  // ---------- set Func Fx\n  useEffect(() => {\n    if (newEditData && newEditData.length > 0) {\n      if (newEditData !== '') setSelected(newEditData);\n    } else {\n      setSelected('0');\n    }\n  }, [newEditData]);\n\n  // ---------- set Func On Change\n  const funOnChange = (val: string) => {\n    console.log('1', { args, val });\n    setSelected(val);\n    console.log({ arrFuncs });\n    for (const currFunc of arrFuncs) currFunc(args, val);\n  };\n\n  console.log('2', { sttSelected });\n  return (\n    <>\n      <Picker\n        style={stlPicker}\n        selectedValue={sttSelected}\n        onValueChange={funOnChange}\n      >\n        {renderItem()}\n      </Picker>\n    </>\n  );\n};\n\nconst stlPicker: ViewStyle = {\n  backgroundColor: 'transparent',\n  borderWidth: 0,\n};\n","newValue":"// ---------- import Packs\nimport { ViewStyle } from 'react-native';\nimport { useEffect, useState } from 'react';\nimport { Picker } from 'react-native-picker;\n\n// ---------- import Local Tools\nimport { pathSel, setData } from '../../base/project';\nimport { useData } from '../../..';\n\ntype Tprops = {\n  pass: {\n    pathList: any[];\n    pathEdit: any[];\n    arrFuncs: any[];\n    pathReturn: any[];\n    args: any;\n  };\n};\n\nexport const IptPicker = (props: Tprops) => {\n  let { pathList, pathEdit, arrFuncs, pathReturn, args } = props.pass;\n\n  pathEdit = ['sc.A3.forms.editData.locationId'];\n  const [sttSelected, setSelected] = useState('');\n  const dataList = useData(ct => pathSel(ct, pathList.join()));\n  const newEditData = useData(ct => pathSel(ct, pathEdit.join()));\n\n  // ---------- set Render Item\n  const renderItem = () => {\n    const checkData = dataList && dataList.length > 0;\n\n    if (checkData) {\n      const containFirstOpt = dataList.find(\n        (e: any) => e.label === 'Selecione...',\n      );\n      !containFirstOpt && dataList.unshift({ label: 'Selecione...', id: '0' });\n\n      return dataList.map((item: any, idx: number) => (\n        <Picker.Item key={idx} label={item.label} value={item.id} />\n      ));\n    }\n\n    return (\n      <>\n        <Picker.Item label={'Nenhum item encontrado'} value={'0'} />\n      </>\n    );\n  };\n\n  // ---------- set Func Fx\n  useEffect(() => {\n    if (newEditData && newEditData.length > 0) {\n      if (newEditData !== '') setSelected(newEditData);\n    } else {\n      setSelected('0');\n    }\n  }, [newEditData]);\n\n  // ---------- set Func On Change\n  const funOnChange = (val: string) => {\n    console.log('1', { args, val });\n    setSelected(val);\n    console.log({ arrFuncs });\n    for (const currFunc of arrFuncs) currFunc(args, val);\n  };\n\n  console.log('2', { sttSelected });\n  return (\n    <>\n      <Picker\n        style={stlPicker}\n        selectedValue={sttSelected}\n        onValueChange={funOnChange}\n      >\n        {renderItem()}\n      </Picker>\n    </>\n  );\n};\n\nconst stlPicker: ViewStyle = {\n  backgroundColor: 'transparent',\n  borderWidth: 0,\n};\n"}}